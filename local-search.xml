<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>2024第一届VCTF纳新赛crypto方向wp</title>
    <link href="/2024/03/18/2024%E7%AC%AC%E4%B8%80%E5%B1%8AVCTF%E7%BA%B3%E6%96%B0%E8%B5%9Bcrypto%E6%96%B9%E5%90%91wp/"/>
    <url>/2024/03/18/2024%E7%AC%AC%E4%B8%80%E5%B1%8AVCTF%E7%BA%B3%E6%96%B0%E8%B5%9Bcrypto%E6%96%B9%E5%90%91wp/</url>
    
    <content type="html"><![CDATA[<h3 id="狂飙"><a href="#狂飙" class="headerlink" title="狂飙"></a>狂飙</h3><h4 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> flag <span class="hljs-keyword">import</span> flag<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><br>m = <span class="hljs-number">88007513702424243702066490849596817304827839547007641526433597788800212065249</span><br>key = os.urandom(<span class="hljs-number">24</span>)<br>key = bytes_to_long(key)<br>n=m % key<br>flag += (<span class="hljs-number">16</span> - <span class="hljs-built_in">len</span>(flag) % <span class="hljs-number">16</span>) * <span class="hljs-string">b&#x27;\x00&#x27;</span><br>iv = os.urandom(<span class="hljs-number">16</span>)<br>aes = AES.new(key,AES.MODE_CBC,iv)<br>enc_flag = aes.encrypt(flag)<br><br><span class="hljs-built_in">print</span>(n)<br><span class="hljs-built_in">print</span>(enc_flag)<br><span class="hljs-built_in">print</span>(iv)<br><br><span class="hljs-comment">#103560843006078708944833658339172896192389513625588</span><br><span class="hljs-comment">#b&#x27;\xfc\x87\xcb\x8e\x9d\x1a\x17\x86\xd9~\x16)\xbfU\x98D\xfe\x8f\xde\x9c\xb0\xd1\x9e\xe7\xa7\xefiY\x95C\x14\x13C@j1\x9d\x08\xd9\xe7W&gt;F2\x96cm\xeb&#x27;</span><br><span class="hljs-comment">#b&#x27;UN\x1d\xe2r&lt;\x1db\x00\xdb\x9a\x84\x1e\x82\xf0\x86&#x27;</span><br></code></pre></td></tr></table></figure><h4 id="解答："><a href="#解答：" class="headerlink" title="解答："></a>解答：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><br>m = <span class="hljs-number">88007513702424243702066490849596817304827839547007641526433597788800212065249</span><br>n = <span class="hljs-number">103560843006078708944833658339172896192389513625588</span><br>enc_flag = <span class="hljs-string">b&#x27;\xfc\x87\xcb\x8e\x9d\x1a\x17\x86\xd9~\x16)\xbfU\x98D\xfe\x8f\xde\x9c\xb0\xd1\x9e\xe7\xa7\xefiY\x95C\x14\x13C@j1\x9d\x08\xd9\xe7W&gt;F2\x96cm\xeb&#x27;</span><br>iv = <span class="hljs-string">b&#x27;UN\x1d\xe2r&lt;\x1db\x00\xdb\x9a\x84\x1e\x82\xf0\x86&#x27;</span><br><br><span class="hljs-comment">#factor(m-n) = 3 * 37 * 439 * 3939851 * 265898280367 * 5036645362649 * 342291058100503482469327892079792475478873</span><br>key = <span class="hljs-number">342291058100503482469327892079792475478873</span> * <span class="hljs-number">37</span> * <span class="hljs-number">439</span> * <span class="hljs-number">265898280367</span><br><br>k = long_to_bytes(key)<br><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(long_to_bytes(key)) == <span class="hljs-number">24</span>:<br>    aes = AES.new(k,AES.MODE_CBC,iv)<br>    flag = aes.decrypt(enc_flag)<br>    <span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure><h3 id="RRSA"><a href="#RRSA" class="headerlink" title="RRSA"></a>RRSA</h3><h4 id="题目：-1"><a href="#题目：-1" class="headerlink" title="题目："></a>题目：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flag <span class="hljs-keyword">import</span> flag<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">genprime</span>():<br>o = getPrime(<span class="hljs-number">300</span>)<br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>r = random.randint(<span class="hljs-number">2</span>**<span class="hljs-number">211</span>,<span class="hljs-number">2</span>**<span class="hljs-number">212</span>)<br><span class="hljs-keyword">if</span> isPrime(o*r+<span class="hljs-number">1</span>):<br><span class="hljs-keyword">return</span> o,o*r+<span class="hljs-number">1</span><br>o1,p = genprime()<br>o2,q = genprime()<br>n=p*q<br>g = random.randint(<span class="hljs-number">2</span>,n)<br>order = o1*o2<br><br>a = <span class="hljs-built_in">pow</span>(g, (p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)//order, n)<br><span class="hljs-keyword">assert</span> <span class="hljs-built_in">pow</span>(a,order,n)==<span class="hljs-number">1</span><br><br>m = bytes_to_long(flag)<br>e = <span class="hljs-number">65537</span><br>c = <span class="hljs-built_in">pow</span>(m,e,n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;n=<span class="hljs-subst">&#123;n&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;c=<span class="hljs-subst">&#123;c&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;a=<span class="hljs-subst">&#123;a&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;o=<span class="hljs-subst">&#123;order&#125;</span>&#x27;</span>)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">n=44435425447782114838897637647733409614831121089064725526413247701631122523646623518523253532066782191116739274354991533158902831935676078270115998050827358178237970133151467497051097694866238654012042884894924846645692294679774577780414805605811029994570132760841672754334836945991390844881416693502552870759</span><br><span class="hljs-string">c=41355409695119524180275572228024314281790321005050664347253778436753663918879919757571129194249071204946415158483084730406579433518426895158142068246063333111438863836668823874266012696265984976829088976346775293102571794377818611709336242495598331872036489022428750111592728015245733975923531682859930386731</span><br><span class="hljs-string">a=39844923600973712577104437232871220768052114284995840460375902596405104689968610170336151307934820030811039502338683925817667771016288030594299464019664781911131177394369348831163266849069740191783143327911986419528382896919157135487360024877230254274474109707112110411601273850406237677432935818199348150470</span><br><span class="hljs-string">o=1745108106200960949680880500144134006212310627077303652648249235148621661187609612344828833696608872318217367008018829485062303972702933973340909520462917612611270028511222134076453</span><br></code></pre></td></tr></table></figure><h4 id="解析："><a href="#解析：" class="headerlink" title="解析："></a>解析：</h4><p>由于$n=qp=(o_1<em>r_1+1)(o_2</em>r_2+1)$<br>所以用n整除o就可以得到$r_1*r_2$</p><h4 id="解答：-1"><a href="#解答：-1" class="headerlink" title="解答："></a>解答：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> gmpy2<br>n=<span class="hljs-number">44435425447782114838897637647733409614831121089064725526413247701631122523646623518523253532066782191116739274354991533158902831935676078270115998050827358178237970133151467497051097694866238654012042884894924846645692294679774577780414805605811029994570132760841672754334836945991390844881416693502552870759</span><br>c=<span class="hljs-number">41355409695119524180275572228024314281790321005050664347253778436753663918879919757571129194249071204946415158483084730406579433518426895158142068246063333111438863836668823874266012696265984976829088976346775293102571794377818611709336242495598331872036489022428750111592728015245733975923531682859930386731</span><br>a=<span class="hljs-number">39844923600973712577104437232871220768052114284995840460375902596405104689968610170336151307934820030811039502338683925817667771016288030594299464019664781911131177394369348831163266849069740191783143327911986419528382896919157135487360024877230254274474109707112110411601273850406237677432935818199348150470</span><br>o=<span class="hljs-number">1745108106200960949680880500144134006212310627077303652648249235148621661187609612344828833696608872318217367008018829485062303972702933973340909520462917612611270028511222134076453</span><br>e = <span class="hljs-number">65537</span><br><br>r = n//o<br>phi = o*r<br>d = gmpy2.invert(e,phi)<br><span class="hljs-built_in">print</span>(long_to_bytes(<span class="hljs-built_in">pow</span>(c,d,n)))<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">b&#x27;flag&#123;0228FC7F-C865-BD0F-F124-9F9860B3542B&#125;&#x27;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>一个小小的pwntools交互</title>
    <link href="/2023/12/20/%E4%B8%80%E4%B8%AA%E5%B0%8F%E5%B0%8F%E7%9A%84pwntools%E4%BA%A4%E4%BA%92/"/>
    <url>/2023/12/20/%E4%B8%80%E4%B8%AA%E5%B0%8F%E5%B0%8F%E7%9A%84pwntools%E4%BA%A4%E4%BA%92/</url>
    
    <content type="html"><![CDATA[<p>又名试图学习出题·杂记</p><p>Pwntools远程交互相关库函数：<br>    <a href="https://blog.csdn.net/DARKNOTES/article/details/124282024">[Tools]Pwn中用于远程交互的库函数总结_python pwn remote函数、-CSDN博客</a></p><h3 id="sever"><a href="#sever" class="headerlink" title="sever"></a>sever</h3><h4 id="主体"><a href="#主体" class="headerlink" title="主体"></a>主体</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> sha256<br><span class="hljs-keyword">import</span> socketserver<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> FLAG<br><span class="hljs-keyword">import</span> signal<br><span class="hljs-keyword">import</span> string<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> os<br><br>flag = FLAG<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Task</span>(socketserver.BaseRequestHandler):<br><br>    ctry = <span class="hljs-number">0</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_recvall</span>(<span class="hljs-params">self</span>):<br>        BUFF_SIZE = <span class="hljs-number">2048</span><br>        data = <span class="hljs-string">b&#x27;&#x27;</span><br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            part = self.request.recv(BUFF_SIZE)<br>            data += part<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(part) &lt; BUFF_SIZE:<br>                <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">return</span> data.strip()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">send</span>(<span class="hljs-params">self, msg, newline=<span class="hljs-literal">True</span></span>):<br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-keyword">if</span> newline:<br>                msg += <span class="hljs-string">b&#x27;\n&#x27;</span><br>            self.request.sendall(msg)<br>        <span class="hljs-keyword">except</span>:<br>            <span class="hljs-keyword">pass</span><br>        <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">recv</span>(<span class="hljs-params">self, prompt=<span class="hljs-string">b&#x27;[-] &#x27;</span></span>):<br>        self.send(prompt, newline=<span class="hljs-literal">False</span>)<br>        <span class="hljs-keyword">return</span> self._recvall()<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">proof_of_work</span>(<span class="hljs-params">self</span>):<br>        random.seed(os.urandom(<span class="hljs-number">8</span>))<br>        proof = <span class="hljs-string">&#x27;&#x27;</span>.join(<br>            [random.choice(string.ascii_letters+string.digits) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">20</span>)])<br>        _hexdigest = sha256(proof.encode()).hexdigest()<br>        self.send(<span class="hljs-string">f&quot;[+] sha256(XXXX+<span class="hljs-subst">&#123;proof[<span class="hljs-number">4</span>:]&#125;</span>) == <span class="hljs-subst">&#123;_hexdigest&#125;</span>&quot;</span>.encode())<br>        x = self.recv(prompt=<span class="hljs-string">b&#x27;[+] Plz tell me XXXX: &#x27;</span>)<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(x) != <span class="hljs-number">4</span> <span class="hljs-keyword">or</span> sha256(x+proof[<span class="hljs-number">4</span>:].encode()).hexdigest() != _hexdigest:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span>   <br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">handle</span>(<span class="hljs-params">self</span>):<br>        signal.alarm(<span class="hljs-number">60</span>)<br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> self.proof_of_work():<br>                self.send(<span class="hljs-string">b&#x27;[!] Wrong!&#x27;</span>)<br>                <span class="hljs-keyword">return</span><br>        <br>            signal.alarm(<span class="hljs-number">300</span>)<br>            self.send(<span class="hljs-string">b&#x27;[+] &#x27;</span>)<br>            <span class="hljs-keyword">while</span> self.ctry &lt; <span class="hljs-number">35</span>: <br>                data = self.recv().decode()<br>                f = self.oraicle(data)<br>                self.send(f)<br>                self.ctry += <span class="hljs-number">1</span> <br><br>        <span class="hljs-keyword">except</span> TimeoutError:<br>            self.send(<span class="hljs-string">b&#x27;[!] Timeout occurred!&#x27;</span>)<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">oraicle</span>(<span class="hljs-params">self,a</span>):<br><br>        <span class="hljs-keyword">if</span> a.isdigit() <span class="hljs-keyword">and</span> <span class="hljs-built_in">int</span>(a)&lt;<span class="hljs-number">33</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">int</span>(a)&gt;<span class="hljs-number">0</span>:<br>            a = <span class="hljs-built_in">int</span>(a)-<span class="hljs-number">1</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-string">b&#x27;[+] &#x27;</span> + flag[a].encode()<br>        <br>        <span class="hljs-keyword">return</span>  <span class="hljs-string">b&#x27;[!] Invalid Member!&#x27;</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadedServer</span>(socketserver.ThreadingMixIn, socketserver.TCPServer):<br>    <span class="hljs-keyword">pass</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ForkedServer</span>(socketserver.ForkingMixIn, socketserver.TCPServer):<br>    <span class="hljs-keyword">pass</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    HOST,PORT = <span class="hljs-string">&#x27;0.0.0.0&#x27;</span>,<span class="hljs-number">12321</span><br>    server = ForkedServer((HOST,PORT),Task)<br>    server.allow_reuse_address = <span class="hljs-literal">True</span><br>    <span class="hljs-built_in">print</span>(HOST, PORT)<br>    server.serve_forever()<br><br></code></pre></td></tr></table></figure><h4 id="杂"><a href="#杂" class="headerlink" title="杂"></a>杂</h4><p><strong>许多的ai原话</strong></p><p>在使用 <code>socketserver.BaseRequestHandler</code> 创建服务器时，通常不需要显式地关闭套接字，因为 <code>socketserver</code> 模块会自动管理套接字的关闭。当客户端断开连接或者出现异常时，<code>socketserver</code> 会在适当的时候自动关闭与客户端相关的套接字。<br>因此，在这种情况下，通常不需要显式地在 <code>finally: client_socket.close()</code> 中关闭套接字。</p><p>在 Python 中，<code>socketserver.BaseRequestHandler</code> 类是处理客户端请求的基类。在服务器端处理客户端请求时，每次客户端连接到服务器时，<code>socketserver</code> 库都会创建一个新的 <code>BaseRequestHandler</code> 类的实例来处理与该客户端的通信。<br>在 <code>BaseRequestHandler</code> 类的实例中，<code>self.request</code> 属性代表与客户端连接的套接字对象。通过这个套接字对象，服务器可以与客户端进行通信，包括接收客户端发送的数据.<br>因此，<code>self.request.recv()</code> 表示从客户端套接字对象中接收数据。在上面的代码中，<code>self.request.recv()</code> 用于接收客户端发送的数据，然后进行处理以完成任务验证（Proof of Work）。</p><p>中断服务器用<code>CTRL+C</code>，<code>CTRL+Z</code>是暂停进程，会占用端口。</p><p>在网络通信中，数据的传输可以是字节流（byte stream）或者字符流（character stream）。<br>     字节流（Byte Stream）：字节流是指一系列连续的字节，以二进制形式传输。在网络通信中，数据通常以字节流的形式传输。字节流可以包含任意类型的数据，包括文本、图像、音频等。在 Python 中，字节流通常使用 <code>bytes</code> 类型来表示。<br>     字符流（Character Stream）： 字符流是指一系列连续的字符，通常使用字符编码（如 ASCII、UTF-8 等）来表示文本数据。字符流通常用于文本文件的读写，以及与用户交互的过程中。在 Python 中，字符流通常使用 <code>str</code> 类型来表示。<br>    在网络通信中，如果需要传输文本数据，可以将文本转换为字节流进行传输，接收方再将接收到的字节流转换回文本。这样可以确保数据在传输过程中的完整性和准确性。可以使用编码（encode）和解码（decode）来在字符流和字节流之间进行转换。<br>    在Python中，b’’表示的是字节字符串（byte string），也称为字节流（byte stream）。<br>    a.isdigit()，判断是否可以转换为有效整数。只有有效整数才能使用int强制类型转换。</p><p>Signal 信号量：发送定时信号<code>single.alarm()</code>，如<code>signal.alarm(60)</code>计时60秒（被用来设置一个60秒的闹钟，在60秒后会向当前进程发送一个闹钟信号），<code>signal.alarm(0)</code>清除定时。<br>具体来说，当 <code>signal.alarm(60)</code> 被设置后，程序运行到 <code>handle</code> 方法中的任何代码时都会开始计时，60秒后如果没有取消或重置计时器，就会触发 <code>SIGALRM</code> 信号。而 <code>signal.alarm(0)</code> 的作用是取消当前正在运行的 <code>alarm</code> 计时器，如果之前设置了 <code>alarm</code>，那么它就会被取消，不会再触发超时。</p><h3 id="exp？"><a href="#exp？" class="headerlink" title="exp？"></a>exp？</h3><p>从网络接收到数据时，通常是以字节数据的形式表示的。如果你需要将这些字节数据转换为字符串以便于处理或展示，就可以使用 <code>.decode()</code> 方法。</p><p>[+]sha256(XXXX+JaakUDSfxkW0xjzV) == 4dbfdc61cb88f5bd08d87493ac62e5ab174780f5f019051f91df8b3c36564ed0<br>[+]Plz tell me XXXX:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python">table = ascii_letters + digits<br><span class="hljs-comment">#包含所有字母和数字</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solve</span>():<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.sh = remote(<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<span class="hljs-number">8899</span>) <br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">proof_of_work</span>(<span class="hljs-params">self</span>):<br>        proof = self.sh.recvuntil(<span class="hljs-string">b&#x27;[+] Plz tell me XXXX:&#x27;</span>)<br><span class="hljs-comment">#接收致至&#x27;[+] Plz tell me X<span class="hljs-doctag">XXX:</span>&#x27;，也就是接收第一排</span><br>        tail = proof[<span class="hljs-number">16</span>:<span class="hljs-number">32</span>].decode()<br>        _<span class="hljs-built_in">hash</span> = proof[<span class="hljs-number">37</span>:<span class="hljs-number">101</span>].decode()<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> product(table, repeat=<span class="hljs-number">4</span>):<br><span class="hljs-comment">#itertools.product，接受多个可迭代对象作为参数，并返回一个迭代器，该迭代器产生所有输入可迭代对象的笛卡尔积</span><br><span class="hljs-comment">#笛卡尔积就是四个位置所有table包含的字符排列组合，离散数学里的</span><br>            head = <span class="hljs-string">&#x27;&#x27;</span>.join(i)<br>            t = hashlib.sha256((head + tail).encode()).hexdigest()  <span class="hljs-comment">#注意是16进制</span><br>            <span class="hljs-keyword">if</span> t == _<span class="hljs-built_in">hash</span>:<br>                self.sh.sendline(head.encode())<br>                <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><pre><code class="hljs">不要老是忘了def个函数括号里丢一个self（小声嘀咕）</code></pre><p>proof结束</p><h4 id="主体-1"><a href="#主体-1" class="headerlink" title="主体"></a>主体</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> string <span class="hljs-keyword">import</span> ascii_letters, digits<br><span class="hljs-keyword">from</span> itertools <span class="hljs-keyword">import</span> product<br>table = ascii_letters + digits<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solve</span>():<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.sh = remote(<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>, <span class="hljs-number">12321</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">proof_of_work</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment"># [+] sha256(XXXX+JaakUDSfxkW0xjzV) == 4dbfdc61cb88f5bd08d87493ac62e5ab174780f5f019051f91df8b3c36564ed0</span><br>        <span class="hljs-comment"># [+] Plz tell me X<span class="hljs-doctag">XXX:</span></span><br>        proof = self.sh.recvuntil(<span class="hljs-string">b&#x27;[+] Plz tell me XXXX:&#x27;</span>)<br>        tail = proof[<span class="hljs-number">16</span>:<span class="hljs-number">32</span>].decode()<br>        _<span class="hljs-built_in">hash</span> = proof[<span class="hljs-number">37</span>:<span class="hljs-number">101</span>].decode()<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> product(table, repeat=<span class="hljs-number">4</span>):<br>            head = <span class="hljs-string">&#x27;&#x27;</span>.join(i)<br>            t = hashlib.sha256((head + tail).encode()).hexdigest()<br>            <span class="hljs-keyword">if</span> t == _<span class="hljs-built_in">hash</span>:<br>                self.sh.sendline(head.encode())<br>                <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">interaction</span>(<span class="hljs-params">self</span>):<br>        flag = <span class="hljs-string">&#x27;&#x27;</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">34</span>):<br>            self.sh.sendline(<span class="hljs-built_in">str</span>(i).encode()) <span class="hljs-comment">#注意int不能直接encode()</span><br>            flag += self.sh.recvline().decode()[-<span class="hljs-number">2</span>]<br>        <span class="hljs-built_in">print</span>(flag)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">solve</span>(<span class="hljs-params">self</span>):<br>        self.proof_of_work()<br>        self.interaction()<br>        self.sh.close()<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    solution = Solve()<br>    solution.solve()<br></code></pre></td></tr></table></figure><p>然后就可以进行一个小交互了</p><h5 id="输出："><a href="#输出：" class="headerlink" title="输出："></a>输出：</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">[+] Opening connection to <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span> on port <span class="hljs-number">12321</span>: Done <br> nulctf&#123;DO_YOU_KNOW_ALAN-BECKER?&#125;<br>[*] Closed connection to <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span> port <span class="hljs-number">12321</span><br></code></pre></td></tr></table></figure><h3 id="nc连接效果："><a href="#nc连接效果：" class="headerlink" title="nc连接效果："></a>nc连接效果：</h3><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs console"><span class="hljs-meta prompt_">$ </span><span class="language-bash">nc 127.0.0.1 12</span><br>321<br>[+] sha256(XXXX+UJvk8n7uX5zAj073) == 0c8e4e2a5771107eedba5725c742f0ca5f1d3f05a67949d68c76ed05dfce14cc<br>[+] Plz tell me XXXX: yyj1  <br>[+]<br>[-] 1<br>[+] n<br>[-] 6<br>[+] f<br>[-] 8<br>[+] D<br>[-] 9<br>[+] O<br>[-] 4<br>[+] c<br>[-] 5<br>[+] t<br>[-] 7<br>[+] &#123;<br>[-] 9<br>[+] O<br>[-] 4<br>[+] c<br>[-] y<br>[!] Invalid Member!<br>[-] 22<br>[+] A<br>[-] 99<br>[!] Invalid Member!<br>[-] -3<br>[!] Invalid Member!<br>[-] 32<br>[+] &#125;<br>[-] ^C<br></code></pre></td></tr></table></figure><p>代码参考来自<a href="https://harry0597.com/2022/06/04/%E5%AF%86%E7%A0%81%E5%87%BA%E9%A2%98%E6%8C%87%E5%8C%97/">密码出题指北 | Harry’s Blog (harry0597.com)</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>极客大挑战2023</title>
    <link href="/2023/12/20/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982023/"/>
    <url>/2023/12/20/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982023/</url>
    
    <content type="html"><![CDATA[<p>记人生中第一次打的CTF比赛</p><h1 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a>RSA</h1><h2 id="SignIn"><a href="#SignIn" class="headerlink" title="SignIn"></a>SignIn</h2><p>  明文：5359437b48656c6c6f5f576f726c645f43727970746f5f6269626f6269626f7d<br>  用base16解码得密文：SYC{Hello_World_Crypto_bibobibo}<br>  得到flag</p><h2 id="proof-of-work"><a href="#proof-of-work" class="headerlink" title="proof_of_work"></a>proof_of_work</h2><p>  一个sha256<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs scss">import hashlib<br><br>for i1 in <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>,<span class="hljs-number">127</span>):  <br>    for i2 in <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>, <span class="hljs-number">127</span>):  <br>        for i3 in <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>, <span class="hljs-number">127</span>):  <br>            for i4 in <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>, <span class="hljs-number">127</span>):  <br>                m = hashlib.<span class="hljs-built_in">sha256</span>()  <br>                m.<span class="hljs-built_in">update</span>(<span class="hljs-built_in">str</span>(<span class="hljs-built_in">chr</span>(i1)+<span class="hljs-built_in">chr</span>(i2)+<span class="hljs-built_in">chr</span>(i3)+<span class="hljs-built_in">chr</span>(i4)+<span class="hljs-string">&#x27;qzxf4BpAvFfWGED3&#x27;</span>).<span class="hljs-built_in">encode</span>(<span class="hljs-string">&#x27;utf-8&#x27;</span>))  <br>                des = m.<span class="hljs-built_in">hexdigest</span>()  <br>                if des == <span class="hljs-string">&#x27;5d60736ba4dac09953d7187939d5861ed2d46faf874c5142157aae8430dead84&#x27;</span>:  <br>                    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(i1)+<span class="hljs-built_in">chr</span>(i2)+<span class="hljs-built_in">chr</span>(i3)+<span class="hljs-built_in">chr</span>(i4)+<span class="hljs-string">&#x27;qzxf4BpAvFfWGED3&#x27;</span>)<br></code></pre></td></tr></table></figure><br><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-meta"># 输出</span><br><span class="hljs-meta"># S2iuqzxf4BpAvFfWGED3</span><br></code></pre></td></tr></table></figure><br>  输入前四位，得到flag：SYC{st3p_1nt0_1nter4ctive_Crypt0graphy}</p><h2 id="SimpleRSA"><a href="#SimpleRSA" class="headerlink" title="SimpleRSA"></a>SimpleRSA</h2><h4 id="解答："><a href="#解答：" class="headerlink" title="解答："></a>解答：</h4><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs makefile">import gmpy2  <br>from Crypto.Util.number import *<br><br>e =65537  <br>p = 24724324630507415330944861660078769085865178656494256140070836181271808964994457686409910764936630391300708451701526900994412268365698217113884698394658886249353179639767806926527103624836198494439742123128823109527320850165486500517304731554371680236789357527395416607541627295126502440202040826686102479225702795427693781581584928770373613126894936500089282093366117940069743670997994742595407158340397268147325612840109162997306902492023078425623839297511182053658542877738887677835528624045235391227122453939459585542485427063193993069301141720316104612551340923656979591045138487394366671477460626997125944456537  <br>c = 510345661718450375632304764819724223824018609359964259503762283253350010161515190912152623604019093266967095847334388281390406831587663253164256543905694021952211220652820225527413861208452760215767828927039893435528572148282529198773772864255061213208279999011194952146362748485103032149806538140693537361755210176698895104708379400806511907719904867068865970241208806615061055047254026118016836750283966478103987375361826198930529462261013324904522014804502582865716441828895047550041401172127129749969507853355531197814919603963664646220505672302543085959372679395717892060245461464861507164276442140407308832537707450729432224150754603518526288767105682399190438680085925078051459448618725871249563011864525585870188123725554411655044152994826056900502298772802133526591794328224932405680583757307064395792317383571866619582974377344736930271554160701478385763426091091686496788999588340419226785217028504684542197970387916262126278955278523452903043316452825738030645100271595942652498852506660789605846309602343932245435421425673058238785509280366229754404949219663043627431437755087855502139890639468481922788973821783957766433857773771229298328019250652625289700950165414584983487319078090573179470893450632419467111117341472  <br>q = 3  <br>  <br><span class="hljs-comment"># n = p*q  </span><br><span class="hljs-comment"># phi = (p-1)*(q-1)  </span><br>phi = p-1  <br>d = gmpy2.invert(e,phi)  <br>m = pow(c,d,p)  <br>flag = long_to_bytes(m)  <br>  <br>assert len(flag) == 35  <br>print(flag)<br></code></pre></td></tr></table></figure><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs autoit"><span class="hljs-meta"># 运行结果</span><br><span class="hljs-meta"># b<span class="hljs-string">&#x27;SYC&#123;Just_a_s1mple_modular_equation&#125;&#x27;</span></span><br></code></pre></td></tr></table></figure><p>  得到flag</p><h2 id="OTPTwice"><a href="#OTPTwice" class="headerlink" title="OTPTwice"></a>OTPTwice</h2><h4 id="解答：-1"><a href="#解答：-1" class="headerlink" title="解答："></a>解答：</h4><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><span class="hljs-keyword">c</span><span class="hljs-number">1</span> <span class="hljs-operator">=</span> bytearray(b&#x27;\xdbi\xab\<span class="hljs-keyword">x</span><span class="hljs-number">8</span>d\xfb<span class="hljs-number">0</span>\xd<span class="hljs-number">3</span>\xfe!\xf<span class="hljs-number">8</span>Xpy\<span class="hljs-keyword">x</span><span class="hljs-number">80</span>w\<span class="hljs-keyword">x</span><span class="hljs-number">8</span><span class="hljs-keyword">c</span>\<span class="hljs-keyword">x</span><span class="hljs-number">87</span>\xb<span class="hljs-number">9</span>&#x27;)  <br><span class="hljs-keyword">c</span><span class="hljs-number">2</span> <span class="hljs-operator">=</span> bytearray(b&#x27;o\xb<span class="hljs-number">0</span>%\xfb\xdb\<span class="hljs-keyword">x</span><span class="hljs-number">0</span>e\r\<span class="hljs-keyword">x</span><span class="hljs-number">04</span>\xde\xd<span class="hljs-number">1</span>\<span class="hljs-keyword">x</span><span class="hljs-number">9</span>a\<span class="hljs-keyword">x</span><span class="hljs-number">08</span>w\xda<span class="hljs-number">4</span>\<span class="hljs-keyword">x</span><span class="hljs-number">0</span>f\<span class="hljs-keyword">x</span><span class="hljs-number">0</span>cR&#x27;)  <br><span class="hljs-keyword">c</span><span class="hljs-number">3</span> <span class="hljs-operator">=</span> bytearray(b&#x27;\xe<span class="hljs-number">7</span>\<span class="hljs-keyword">x</span><span class="hljs-number">80</span>\xcd\ria\xb<span class="hljs-number">2</span>\xca\<span class="hljs-keyword">x</span><span class="hljs-number">89</span>\<span class="hljs-keyword">x</span><span class="hljs-number">1</span>a\<span class="hljs-keyword">x</span><span class="hljs-number">9</span>d<span class="hljs-comment">;|#3\xf7\xbb\x96&#x27;)  </span><br>  <br>k<span class="hljs-number">2</span> <span class="hljs-operator">=</span> bytearray(<span class="hljs-keyword">x</span> ^ y for <span class="hljs-keyword">x</span><span class="hljs-punctuation">,</span>y in zip(<span class="hljs-keyword">c</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-keyword">c</span><span class="hljs-number">2</span>))  <br>k<span class="hljs-number">1</span> <span class="hljs-operator">=</span> bytearray(<span class="hljs-keyword">x</span> ^ y for <span class="hljs-keyword">x</span><span class="hljs-punctuation">,</span>y in zip(<span class="hljs-keyword">c</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-keyword">c</span><span class="hljs-number">3</span>))  <br>m <span class="hljs-operator">=</span> bytearray(<span class="hljs-keyword">x</span> ^ y for <span class="hljs-keyword">x</span><span class="hljs-punctuation">,</span>y in zip(<span class="hljs-keyword">c</span><span class="hljs-number">3</span><span class="hljs-punctuation">,</span>k<span class="hljs-number">2</span>))  <br>  <br>print(m)<br></code></pre></td></tr></table></figure><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs autoit"><span class="hljs-meta"># 输出</span><br><span class="hljs-meta"># bytearray(b<span class="hljs-string">&#x27;SYC&#123;I_l0v3_Crypt0&#125;&#x27;</span>)</span><br></code></pre></td></tr></table></figure><h2 id="OldAlgorithm"><a href="#OldAlgorithm" class="headerlink" title="OldAlgorithm"></a>OldAlgorithm</h2><p>  该题是中国剩余定理情况</p><h4 id="解答：-2"><a href="#解答：-2" class="headerlink" title="解答："></a>解答：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> math  <br>  <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Get_Mi</span>(<span class="hljs-params">m_list, m</span>):  <br>    M_list = []  <br>    <span class="hljs-keyword">for</span> mi <span class="hljs-keyword">in</span> m_list:  <br>        M_list.append(m // mi)  <br>    <span class="hljs-keyword">return</span> M_list  <br>  <br>  <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Get_resMi</span>(<span class="hljs-params">M_list, m_list</span>):  <br>    resM_list = []  <br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(M_list)):  <br>        resM_list.append(Get_ni(M_list[i], m_list[i])[<span class="hljs-number">0</span>])  <br>    <span class="hljs-keyword">return</span> resM_list  <br>  <br>  <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Get_ni</span>(<span class="hljs-params">a, b</span>):  <br>    <span class="hljs-keyword">if</span> b == <span class="hljs-number">0</span>:  <br>        x = <span class="hljs-number">1</span>  <br>        y = <span class="hljs-number">0</span>  <br>        q = a  <br>        <span class="hljs-keyword">return</span> x, y, q  <br>    ret = Get_ni(b, a % b)  <br>    x = ret[<span class="hljs-number">0</span>]  <br>    y = ret[<span class="hljs-number">1</span>]  <br>    q = ret[<span class="hljs-number">2</span>]  <br>    temp = x  <br>    x = y  <br>    y = temp - a // b * y  <br>    <span class="hljs-keyword">return</span> x, y, q  <br>  <br>  <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">result</span>(<span class="hljs-params">a_list, m_list</span>):  <br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(m_list)):  <br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i + <span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(m_list)):  <br>            <span class="hljs-keyword">if</span> <span class="hljs-number">1</span> != math.gcd(m_list[i], m_list[j]):  <br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;不能直接利用中国剩余定理&quot;</span>)  <br>                <span class="hljs-keyword">return</span>  <br>    m = <span class="hljs-number">1</span>  <br>    <span class="hljs-keyword">for</span> mi <span class="hljs-keyword">in</span> m_list:  <br>        m *= mi  <br>    Mi_list = Get_Mi(m_list, m)  <br>    Mi_inverse = Get_resMi(Mi_list, m_list)  <br>    x = <span class="hljs-number">0</span>  <br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(a_list)):  <br>        x += Mi_list[i] * Mi_inverse[i] * a_list[i]  <br>        x %= m  <br>    <span class="hljs-keyword">return</span> x  <br>  <br>p= [<span class="hljs-number">58657</span>, <span class="hljs-number">47093</span>, <span class="hljs-number">47963</span>, <span class="hljs-number">41213</span>, <span class="hljs-number">57653</span>, <span class="hljs-number">56923</span>, <span class="hljs-number">41809</span>, <span class="hljs-number">49639</span>, <span class="hljs-number">44417</span>, <span class="hljs-number">38639</span>, <span class="hljs-number">39857</span>, <span class="hljs-number">53609</span>, <span class="hljs-number">55621</span>, <span class="hljs-number">41729</span>, <span class="hljs-number">60497</span>, <span class="hljs-number">44647</span>, <span class="hljs-number">39703</span>, <span class="hljs-number">55117</span>, <span class="hljs-number">44111</span>, <span class="hljs-number">57131</span>, <span class="hljs-number">37747</span>, <span class="hljs-number">63419</span>, <span class="hljs-number">63703</span>, <span class="hljs-number">64007</span>, <span class="hljs-number">46349</span>, <span class="hljs-number">39241</span>, <span class="hljs-number">39313</span>, <span class="hljs-number">44909</span>, <span class="hljs-number">40763</span>, <span class="hljs-number">46727</span>, <span class="hljs-number">34057</span>, <span class="hljs-number">56333</span>]  <br>c= [<span class="hljs-number">36086</span>, <span class="hljs-number">4005</span>, <span class="hljs-number">3350</span>, <span class="hljs-number">23179</span>, <span class="hljs-number">34246</span>, <span class="hljs-number">5145</span>, <span class="hljs-number">32490</span>, <span class="hljs-number">16348</span>, <span class="hljs-number">13001</span>, <span class="hljs-number">13628</span>, <span class="hljs-number">7742</span>, <span class="hljs-number">46317</span>, <span class="hljs-number">50824</span>, <span class="hljs-number">23718</span>, <span class="hljs-number">32995</span>, <span class="hljs-number">7640</span>, <span class="hljs-number">10590</span>, <span class="hljs-number">46897</span>, <span class="hljs-number">39245</span>, <span class="hljs-number">16633</span>, <span class="hljs-number">31488</span>, <span class="hljs-number">36547</span>, <span class="hljs-number">42136</span>, <span class="hljs-number">52782</span>, <span class="hljs-number">31929</span>, <span class="hljs-number">34747</span>, <span class="hljs-number">29026</span>, <span class="hljs-number">18748</span>, <span class="hljs-number">6634</span>, <span class="hljs-number">9700</span>, <span class="hljs-number">8126</span>, <span class="hljs-number">5197</span>]  <br><br><span class="hljs-built_in">print</span>(long_to_bytes(result(c,p)))<br></code></pre></td></tr></table></figure><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs autoit"><span class="hljs-meta"># 输出</span><br><span class="hljs-meta"># b<span class="hljs-string">&#x27;SYC&#123;CRT_1s_s0_ju1cy!&#125;]mC\x9c\xf9C/\xfc\xb8t\x16&#x27;</span></span><br></code></pre></td></tr></table></figure><p>得到flag：SYC{CRT_1s_s0_ju1cy!}</p><h2 id="easy-classic"><a href="#easy-classic" class="headerlink" title="easy_classic"></a>easy_classic</h2><p>  第一层明文：udzeojxuwqcu<br>  凯撒加密，密钥Q，密文：enjoythegame</p><p>  第二层明文：ialhhooavtepcyr<br>  看起来很像打乱顺序的密文，重新排序后得到：ilovecryptohaha</p><p>  第三层明文：5a6H5a6Z5LiH5rOV55qE6YKj5Liq5rqQ5aS0<br>  base64解码，得到密文：宇宙万法的那个源头<br>    ps.必须是uft-8编码的汉字</p><p>  第四层明文：熊曰：呋食食食取噗山笨笨破嗄咯哈動嗡雜類嗒嘿啽沒歡破吖咬我啽寶盜噔咯沒<br>  熊曰加密，上网使用与相关加解密网站得到密文：never gonna give you up<br>    网站：<a href="http://hi.pcmoe.net/">与熊论道/熊曰加密 - PcMoe!</a></p><p>  第五层<br>  password: adltlfltqrcy<br>  key: 👝👘👠👩👞👘👤👜<br>    密钥为emoji加密，使用相关网站解密得到key：fairgame<br> Playfair解密，得到密文：genshinstart</p><p>  输入密文，解开最后的txt的锁，得到flag：SYC{classical_1s_fun}</p><h2 id="PolyRSA"><a href="#PolyRSA" class="headerlink" title="PolyRSA"></a>PolyRSA</h2><h4 id="解析："><a href="#解析：" class="headerlink" title="解析："></a>解析：</h4><p>$\because c1=(2p+3q)^{e1}$ mod n<br>$\therefore c1=((2p)^{e1}+(3q)^{e1})$ mod n<br>$\therefore c1^{e2}=((2p)^{K}+(3q)^{K})$ mod n<br>同理<br>$\because c2=(5p+7q)^{e1}$ mod n<br>$\therefore c2=((5p)^{e2}+(7q)^{e2})$ mod n<br>$\therefore c2^{e1}=((5p)^{K}+(7q)^{K})$ mod n</p><p>$\therefore c2^{e1}<em>3^{K}-c1^{e2}</em>7^{K}=p^{K}<em>(15^{K}-14^{K})=p^{K}$<br>  $c1^{e2}</em>5^{K}-c2^{e1}<em>2^{K}=q^{K}</em>(15^{K}-14^{K})=q^{K}$</p><p>$\therefore p=gcd(c2^{e1}<em>3^{K}-c1^{e2}</em>7^{K},n)$<br>  $q=gcd(c1^{e2}<em>5^{K}-c2^{e1}</em>2^{K},n)$</p><h4 id="解答：-3"><a href="#解答：-3" class="headerlink" title="解答："></a>解答：</h4><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs makefile">from Crypto.Util.number import *<br>from gmpy2 import *<br>  <br>K = e1*e2  <br>w1 = (pow(c2, e1, n)*pow(3, K, n)) % n - (pow(c1, e2, n)*pow(7, K, n)) % n  <br>w2 = (pow(c1, e2, n)*pow(5, K, n)) % n - pow(c2, e1, n)*pow(2, K, n) % n  <br><span class="hljs-comment"># k1 = (c2**e1)*(3**K) - (c1**e2)*(7**K)  </span><br><span class="hljs-comment"># k2 = c1**e2*5**K - c2**e1*2**K  </span><br>  <br>p = gcd(w1, n)  <br>q = gcd(w2, n)  <br>phi = (p-1)*(q-1)  <br>d = inverse(e, phi)  <br>m = pow(c, d, n)  <br>print(long_to_bytes(m))<br><br>e = 65537  <br>e1 = 113717  <br>e2 = 80737  <br>c1 = 97528398828294138945371018405777243725957112272614466238005409057342884425132214761228537249844134865481148636534134025535106624840957740753950100180978607132333109806554009969378392835952544552269685553539656827070349532458156758965322477969141073720173165958341043159560928836304172136610929023123638981560836183245954461041167802574206323129671965436040047358250847178930436773249800969192016749684095882580749559014647942135761757750292281205876241566597813517452803933496218995755905344070203047797893640399372627351254542342772576533524820435965479881620338366838326652599102311019884528903481310690767832417584600334987458835108576322111553947045733143836419313427495888019352323209000292825566986863770366023326755116931788018138432898323148059980463407567431417724940484236335082696026821105627826117901730695680967455710434307270501190258033004471156993017301443803372029004817834317756597444195146024630164820841200575179112295902020141040090350486764038633257871003899386340004440642516190842086462237559715130631205046041819931656962904630367121414263911179041905140516402771368603623318492074423223885367923228718341206283572152570049573607906130786276734660847733952210105659707746969830132429975090175091281363770357  <br>c2 = 353128571201645377052005694809874806643786163076931670184196149901625274899734977100920488129375537186771931435883114557320913415191396857882995726660784707377672210953334914418470453787964899846194872721616628198368241044602144880543115393715025896206210152190007408112767478800650578941849344868081146624444817544806046188600685873402369145450593575618922226415069043442295774369567389939040265656574664538667552522329712111984168798829635080641332045614585247317991581514218486004191829362787750803153463482021229058714990823658655863245025037102127138472397462755776598314247771125981017814912049441827643898478473451005083533693951329544115861795587564408860828213753948427321483082041546722974666875065831843384005041800692983406353922680299538080900818930589336142421748023025830846906503542594380663429947801329079870530727382679634952272644949425079242992486832995962516376820051495641486546631849426876810933393153871774796182078367277299340503872124124714036499367887886486264658590613431293656417255355575602576047502506125375605713228912611320198066713358654181533335650785578352716562937038768171269136647529849805172492594142026261051266577821582011917001752590659862613307646536049830151262848916867223615064832279222  <br>c = 375617816311787295279632219241669262704366237192565344884527300748210925539528834207344757670998995567820735715933908541800125317082581328287816628816752542104514363629022246620070560324071543077301256917337165566677142545053272381990573611757629429857842709092285442319141751484248315990593292618113678910350875156232952525787082482638460259354559904243062546518553607882194808191571131590524874275187750985821420412987586148770397073003186510357920710387377990379862185266175190503647626248057084923516190642292152259727446111686043531725993433395002330208067534104745851308178560234372373476331387737629284961288204368572750848248186692623500372605736825205759172773503283282321274793846281079650686871355211691681512637459986684769598186821524093789286661348936784712071312135814683041839882338235290487868969391040389837253093468883093296547473466050960563347060307256735803099039921213839491129726807647623542881247210251994139130146519265086673883077644185971830004165931626986486648581644383717994174627681147696341976767364316172091139507445131410662391699728189797082878876950386933926807186382619331901457205957462337191923354433435013338037399565519987793880572723211669459895193009710035003369626116024630678400746946356  <br>n = 728002565949733279371529990942440022467681592757835980552797682116929657292509059813629423038094227544032071413317330087468458736175902373398210691802243764786251764982802000867437756347830992118278032311046807282193498960587170291978547754942295932606784354258945168927044376692224049202979158068158842475322825884209352566494900083765571037783472505580851500043517614314755340168507097558967372661966013776090657685241689631615245294004694287660685274079979318342939473469143729494106686592347327776078649315612768988028622890242005700892937828732613800620455225438339852445425046832904615827786856105112781009995862999853122308496903885748394541643702103368974605177097553007573113536089894913967154637055293769061726082740854619536748297829779639633209710676774371525146758917646731487495135734759201537358734170552231657257498090553682791418003138924472103077035355223367678622115314235119493397080290540006942708439607767313672671274857069053688258983103863067394473084183472609906612056828326916114024662795812611685559034285371151973580240723680736227737324052391721149957542711415812665358477474058103338801398214688403784213100455466705770532894531602252798634923125974783427678469124261634518543957766622712661056594132089  <br></code></pre></td></tr></table></figure><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs autoit"><span class="hljs-meta"># 输出</span><br><span class="hljs-meta"># b<span class="hljs-string">&#x27;SYC&#123;poly_rsa_Just_need5_s1mple_gcd&#125;&#x27;</span></span><br></code></pre></td></tr></table></figure><h2 id="Fi1nd-th3-x’"><a href="#Fi1nd-th3-x’" class="headerlink" title="Fi1nd_th3_x’"></a>Fi1nd_th3_x’</h2><h4 id="解析：-1"><a href="#解析：-1" class="headerlink" title="解析："></a>解析：</h4><p>$\begin{cases}d \equiv dP \pmod{(q-1)<em>(r-1)} \\d \equiv dQ \pmod{(p-1)</em>(r-1)} \\d \equiv dR \pmod{(q-1)*(p-1)}\end{cases}$<br>中国剩余定理不互质</p><h4 id="解答：-4"><a href="#解答：-4" class="headerlink" title="解答："></a>解答：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2  <br><span class="hljs-keyword">from</span> functools <span class="hljs-keyword">import</span> reduce  <br><br>p= <span class="hljs-number">13014610351521460822156239705430709078128228907778181478242620569429327799535062679140131416771915929573454741755415612880788196172134695027201422226050343</span>  <br>q= <span class="hljs-number">12772373441651008681294250861077909144300908972709561019514945881228862913558543752401850710742410181542277593157992764354184262443612041344749961361188667</span>  <br>r= <span class="hljs-number">12128188838358065666687296689425460086282352520167544115899775800918383085863282204525519245937988837403739683061218279585168168892037039644924073220678419</span>  <br>dP= <span class="hljs-number">116715737414908163105708802733763596338775040866822719131764691930369001776551671725363881836568414327815420649861207859100479999650414099346914809923964116101517432576562641857767638396325944526867458624878906968552835814078216316470330511385701105459053294771612727181278955929391807414985165924450505855941</span>  <br>dQ= <span class="hljs-number">44209639124029393930247375993629669338749966042856653556428540234515804939791650065905841618344611216577807325504984178760405516121845853248373571704473449826683120387747977520655432396578361308033763778324817416507993263234206797363191089863381905902638111246229641698709383653501799974217118168526572365797</span>  <br>dR= <span class="hljs-number">60735172709413093730902464873458655487237612458970735840670987186877666190533417038325630420791294593669609785154204677845781980482700493870590706892523016041087206844082222225206703139282240453277802870868459288354322845410191061009582969848870045522383447751431300627611762289800656277924903605593069856921</span>  <br>c= <span class="hljs-number">93063188325241977486352111369210103514669725591157371105152980481620575818945846725056329712195176948376321676112726029400835578531311113991944495646259750817465291340479809938094295621728828133981781064352306623727112813796314947081857025012662546178066873083689559924412320123824601550896063037191589471066773464829226873338699012924080583389032903142107586722373131642720522453842444615499672193051587154108368643495983197891525747653618742702589711752256009</span>  <br>  <br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;(p-1)*(r-1) =&#x27;</span>,(p-<span class="hljs-number">1</span>)*(r-<span class="hljs-number">1</span>))  <br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;(q-1)*(r-1) =&#x27;</span>,(q-<span class="hljs-number">1</span>)*(r-<span class="hljs-number">1</span>))  <br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;(p-1)*(q-1) =&#x27;</span>,(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>))  <br><br>  <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">exgcd</span>(<span class="hljs-params">a, b</span>):  <br>    <span class="hljs-keyword">if</span> b == <span class="hljs-number">0</span>: <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>, <span class="hljs-number">0</span>  <br>    x, y = exgcd(b, a % b)  <br>    <span class="hljs-keyword">return</span> y, x - a // b * y  <br>  <br>  <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">uni</span>(<span class="hljs-params">P, Q</span>):  <br>    r1, m1 = P  <br>    r2, m2 = Q  <br>  <br>    d = gmpy2.gcd(m1, m2)  <br>    <span class="hljs-keyword">assert</span> (r2 - r1) % d == <span class="hljs-number">0</span>  <br>  <br>    l1, l2 = exgcd(m1 // d, m2 // d)  <br>  <br>    <span class="hljs-keyword">return</span> (r1 + (r2 - r1) // d * l1 * m1) % gmpy2.lcm(m1, m2), gmpy2.lcm(m1, m2)  <br>  <br>  <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">CRT</span>(<span class="hljs-params">eq</span>):  <br>    <span class="hljs-keyword">return</span> reduce(uni, eq)  <br>  <br>  <br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:  <br>    n = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())  <br>    eq = [<span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().strip().split()))[::-<span class="hljs-number">1</span>] <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n)]  <br>    d = CRT(eq)[<span class="hljs-number">0</span>]<br>      <br>n = p*q*r  <br>m = <span class="hljs-built_in">pow</span>(c,d,n)  <br><br>flag = libnum.n2s(m)  <br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs gcode"><span class="hljs-attr"># 输出</span><br><span class="hljs-attr">(p-1</span>)*<span class="hljs-comment">(r-1)</span> = <span class="hljs-number">157843652000901922592922534078798438728561466809160280102796295598657892969643944706331069245997476544245343941352790420588475071314554864105017844042288024862815624473670646072940554294732151308571897295236552684396649767503957047616962978624449348438551386053918285535437988924118937549728089877793860918956</span><br><span class="hljs-comment">(q-1)</span>*<span class="hljs-comment">(r-1)</span> = <span class="hljs-number">154905757014372756191477923232488802075510411348567355414988814359374852064824181741663658727687998705149903985671747780705960374732554616826563203303584163459125118604057521416183781255969121762147826355466246464743348283573511339459135541869974720375624567710723081303090966036696876360406676904859412410388</span><br><span class="hljs-comment">(p-1)</span>*<span class="hljs-comment">(q-1)</span> = <span class="hljs-number">166227463607209004468932873221626620944628889899142110675440222050856617147455380049619547065213045395392929727012833645043930997376712553892400252643682129053352313364478991542722896445389658481349386462407754423678541287560754968000284796665028132977555819700889151726789989252780704135125995666535475823772</span><br><br><span class="hljs-attr"># 输入</span><br><span class="hljs-attr">3</span><br><span class="hljs-number">157843652000901922592922534078798438728561466809160280102796295598657892969643944706331069245997476544245343941352790420588475071314554864105017844042288024862815624473670646072940554294732151308571897295236552684396649767503957047616962978624449348438551386053918285535437988924118937549728089877793860918956</span> <span class="hljs-number">44209639124029393930247375993629669338749966042856653556428540234515804939791650065905841618344611216577807325504984178760405516121845853248373571704473449826683120387747977520655432396578361308033763778324817416507993263234206797363191089863381905902638111246229641698709383653501799974217118168526572365797</span><br><span class="hljs-number">154905757014372756191477923232488802075510411348567355414988814359374852064824181741663658727687998705149903985671747780705960374732554616826563203303584163459125118604057521416183781255969121762147826355466246464743348283573511339459135541869974720375624567710723081303090966036696876360406676904859412410388</span> <span class="hljs-number">116715737414908163105708802733763596338775040866822719131764691930369001776551671725363881836568414327815420649861207859100479999650414099346914809923964116101517432576562641857767638396325944526867458624878906968552835814078216316470330511385701105459053294771612727181278955929391807414985165924450505855941</span><br><span class="hljs-number">166227463607209004468932873221626620944628889899142110675440222050856617147455380049619547065213045395392929727012833645043930997376712553892400252643682129053352313364478991542722896445389658481349386462407754423678541287560754968000284796665028132977555819700889151726789989252780704135125995666535475823772</span> <span class="hljs-number">60735172709413093730902464873458655487237612458970735840670987186877666190533417038325630420791294593669609785154204677845781980482700493870590706892523016041087206844082222225206703139282240453277802870868459288354322845410191061009582969848870045522383447751431300627611762289800656277924903605593069856921</span><br><span class="hljs-attr">#输出</span><br><span class="hljs-attr">SYC&#123;CRT_1</span>s_f<span class="hljs-number">3</span><span class="hljs-symbol">n_but_Gen3</span>hi_i<span class="hljs-name">m9</span>act_is_a_balabalaba&#125;<br></code></pre></td></tr></table></figure><p>得到flag：SYC{CRT_1s_f3n_but_Gen3hi_im9act_is_a_balabalaba}</p><h4 id="小彩蛋"><a href="#小彩蛋" class="headerlink" title="小彩蛋"></a>小彩蛋</h4><p>txt文本：<br>5Lq65Lus5Y+q6K6w5b6X77yM6L+Z5pys5piv6aOO5ZKM5pel5Li955qE5LiA5aSp77yManJsNzc35q2j5Zyo572R5LiK5a2m5Lmg5a+G56CB5a2m44CC5b+954S25LmL6Ze077yM6buR6Imy5raI6YCA77yM5bGP5bmV55m95YWJ6aqk6LW377yM5omA5pyJ55qE6K665paH6YO95reh5Ye655y85biY44CC5LuW5Yed56We5LiA55yL77yM5Y205Y+q5pyJ5rex6YKD5aaC5aKo55qE4oCc5Y6f56We4oCd5LqM5a2X5Zyo5Zue5bqU552A44CC5pyq5Y+K5oCd6ICD77yManJsNzc36ISR6KKL5LiA6Zi15pmV55yp44CC6ICM5q2k5Yi777yM5o+Q55Om54m55aSn6ZmG5LiK56m65pyJ6YeR5YWJ6Zeq54OB77yM56m66Ze05Lmx5rWB5LmL5YaF77yM5LiD56eN5YWD57Sg5Yqb5pKV5byA5LqG5pe256m66KOC57yd77yM6aOO5bim5p2l5LqG5pWF5LqL55qE56eN5a2Q44CC5Y+v5YaN5Z2a5Zu655qE5bKp55+z5Lmf6Zq+6YCD56Oo5o2f55qE5ZG96L+Q44CC4oCc5LiW55WM77yM6YGX5b+Y5oiR44CC4oCd5LuW57uI56m25b+Y6K6w5LqG6Ieq5bexQ3J5cHRvZXLnmoTouqvku73jgILigJzmj5Dnk6bnibnlpKfpmYbnmoTml4XkurrvvIzkvaDog73mib7liLDmiJHpgZflpLHnmoTotKblj7flkJfvvJ/igJ0=<br>base64解码：<br>人们只记得，这本是风和日丽的一天，jrl777正在网上学习密码学。忽然之间，黑色消退，屏幕白光骤起，所有的论文都淡出眼帘。他凝神一看，却只有深邃如墨的“原神”二字在回应着。未及思考，jrl777脑袋一阵晕眩。而此刻，提瓦特大陆上空有金光闪烁，空间乱流之内，七种元素力撕开了时空裂缝，风带来了故事的种子。可再坚固的岩石也难逃磨损的命运。“世界，遗忘我。”他终究忘记了自己Cryptoer的身份。“提瓦特大陆的旅人，你能找到我遗失的账号吗？”</p><h1 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h1><h2 id="DEATH-N0TE"><a href="#DEATH-N0TE" class="headerlink" title="DEATH_N0TE"></a>DEATH_N0TE</h2><h4 id="前半段flag"><a href="#前半段flag" class="headerlink" title="前半段flag"></a>前半段flag</h4><p>将图片用steagsolve打开，lsb隐写解码，发现疑似明文：<br>IuS9oOe7p+e7reinguWvn+aJi+S4iua8hum7keiJsueahOeslOiusOacrO+8jOWGt+mdmeS4i+adpeeahOS9oOWPkeeOsOS6huiXj+WcqOWwgemdouacgOS4i+i+ueeahOS4gOihjOWwj+WtlzpTWUN7RDRAVGhfTjB0NF8iCiLkvaDmtY/op4jov4fmlbTkuKrnrJTorrDmnKzvvIzlj6/mg5zlhajmmK/nqbrnmb3pobXvvIzlhbbkuK3mnInkuIDpobXkuI3nn6XpgZPooqvosIHmkpXmjonkuobvvIzkvaDmnIDnu4jov5jmmK/nv7vliLDkuobnvLrlpLHnmoTpgqPkuIDpobUiCiLkvaDnlKjpk4XnrJTmtoLmirnnnYDlkI7pnaLkuIDpobXvvIzkuIrpnaLnvJPnvJPlh7rnjrDkuobpgZflpLHnmoTnl5Xov7kuLi4i<br>base64解码得到：<br>“你继续观察手上漆黑色的笔记本，冷静下来的你发现了藏在封面最下边的一行小字:SYC{D4@Th_N0t4_”<br>“你浏览过整个笔记本，可惜全是空白页，其中有一页不知道被谁撕掉了，你最终还是翻到了缺失的那一页”<br>“你用铅笔涂抹着后面一页，上面缓缓出现了遗失的痕迹…”<br>找到前半截flag：SYC{D4@Th_N0t4_</p><h4 id="后半截flag"><a href="#后半截flag" class="headerlink" title="后半截flag"></a>后半截flag</h4><p>从图片中能隐约看见白色像素点，推测需要提取像素点，构成新图片<br><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs haxe">from PIL <span class="hljs-keyword">import</span> Image  <br>  <br>im = Image.open(<span class="hljs-string">&#x27;d:/Users/ASUS/Downloads/DEATH_N0TE/kamisama.png&#x27;</span>)  <br>pix = im.load()  <br>width = im.size[<span class="hljs-number">0</span>]  <br>height = im.size[<span class="hljs-number">1</span>]  <br><span class="hljs-meta"># 图片查看后猜测间隔距离为5像素  </span><br><span class="hljs-keyword">new</span><span class="hljs-type">_width</span> = width <span class="hljs-comment">// 5  </span><br><span class="hljs-keyword">new</span><span class="hljs-type">_height</span> = height <span class="hljs-comment">// 5  </span><br><br><span class="hljs-keyword">new</span><span class="hljs-type">_img</span> = Image.<span class="hljs-keyword">new</span><span class="hljs-type"></span>(<span class="hljs-string">&quot;RGB&quot;</span>, (<span class="hljs-keyword">new</span><span class="hljs-type">_width</span>, <span class="hljs-keyword">new</span><span class="hljs-type">_height</span>))  <br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>,width,<span class="hljs-number">5</span>):  <span class="hljs-type"></span><br>    <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>,height,<span class="hljs-number">5</span>):  <span class="hljs-type"></span><br>        rgb=pix[x, y]  <br></code></pre></td></tr></table></figure><br>        new_img.putpixel((x//5,y//5),(int(rgb[0]),int(rgb[1]),int(rgb[2])))<br><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">new</span><span class="hljs-type">_img</span>.save(<span class="hljs-string">&#x27;new_image.png&#x27;</span>)<br></code></pre></td></tr></table></figure><br>得到图片<br><img src="https://s2.loli.net/2023/12/22/hxV9HM3o6FOlcXi.png" alt=""><br>结合题目，该图片上的花体字是死亡笔记中的一种字体，对照提取得到：TkFNRV9vMnRha3VYWH0=<br>利用base64解码得到后半截flag：NAME_o2takuXX}</p><p>合并得到完整的flag：SYC{D4@Th_N0t4_NAME_o2takuXX}</p><h4 id="小彩蛋-1"><a href="#小彩蛋-1" class="headerlink" title="小彩蛋"></a>小彩蛋</h4><p>IuS9oOaJ vuWIsOS6 huS4gOac rOOAikRF QVRIIE5P VEXjgIvv vIzlpb3l pYflv4Pp qbHkvb/k vaDnv7vl vIDov5nm nKznrJTo rrDvvIzk vaDpmIXo r7vkuobk vb/nlKjo p4TliJnv vIzkvYbm mK/kvaDm g4rorrbl nLDlj5Hn jrDliJrm iY3nmoTo p4TliJnk uYvkuK3l lK/ni6zm sqHmnInn rKwxMOad oS4uLiIK IuS9oOWG jeasoeWO u+ehruiu pOaYr+WQ puWmguat pO+8jOes lOiusOS4 iueahOaW h+Wtl+WN tOS7v+S9 m+a0u+S6 hui1t+ad pe+8jOWc qOS9oOec vOS4reS4 jeaWreWc sOaUvuWk p+e8qeWw j++8jOS9 oOmXreS4 iuS6huWP jOecvC4u LiIKIuWO n+acrOm7 keiJsuea hOaWh+Wt l+S4gOi9 rOWPmOaI kOihgOe6 ouiJsu+8 jOivoeW8 gueahOeU u+mdoui/ mOaYr+WH uueOsOS6 juS9oOea hOinhue9 keiGnOWJ je+8jOS9 oOWGs+Wu muS4jeWG jee6oOe7 k+S6jumB l+Wkseea hOinhOWI me+8jOW5 u+iniea2 iOWkseS6 hi4uLiI=<br>“你找到了一本《DEATH NOTE》，好奇心驱使你翻开这本笔记，你阅读了使用规则，但是你惊讶地发现刚才的规则之中唯独没有第10条…”<br>“你再次去确认是否如此，笔记上的文字却仿佛活了起来，在你眼中不断地放大缩小，你闭上了双眼…”<br>“原本黑色的文字一转变成血红色，诡异的画面还是出现于你的视网膜前，你决定不再纠结于遗失的规则，幻觉消失了…”</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>青少年CTF擂台挑战赛2024Round1</title>
    <link href="/2023/12/20/%E9%9D%92%E5%B0%91%E5%B9%B4CTF%E6%93%82%E5%8F%B0%E6%8C%91%E6%88%98%E8%B5%9B2024Round1/"/>
    <url>/2023/12/20/%E9%9D%92%E5%B0%91%E5%B9%B4CTF%E6%93%82%E5%8F%B0%E6%8C%91%E6%88%98%E8%B5%9B2024Round1/</url>
    
    <content type="html"><![CDATA[<h3 id="解个方程"><a href="#解个方程" class="headerlink" title="解个方程"></a>解个方程</h3><h4 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h4><p>一个动态flag<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">p</span> = <span class="hljs-number">151655885656450332076952504214322757273</span>  <br><span class="hljs-attr">q</span> = <span class="hljs-number">148531443385360803011533167272599291111</span>  <br><span class="hljs-attr">e</span> = <span class="hljs-number">65537</span><br><span class="hljs-attr">d</span> = ?<br></code></pre></td></tr></table></figure></p><h4 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2  <br>p = <span class="hljs-number">151655885656450332076952504214322757273</span>  <br>q = <span class="hljs-number">148531443385360803011533167272599291111</span>  <br>e = <span class="hljs-number">65537</span>  <br>n = q*p  <br>phi = (p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)  <br>d = gmpy2.invert(e,phi)  <br><span class="hljs-built_in">print</span>(d)<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">1288909371486973234158599185728560686247715008971192466783006826206253573473</span><br></code></pre></td></tr></table></figure><h3 id="ez-log"><a href="#ez-log" class="headerlink" title="ez_log"></a>ez_log</h3><h4 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> *<br>flag=<span class="hljs-string">b&#x27;key&#123;xxxxxxx&#125;&#x27;</span><br>m=bytes_to_long(flag)<br>p=<span class="hljs-number">3006156660704242356836102321001016782090189571028526298055526061772989406357037170723984497344618257575827271367883545096587962708266010793826346841303043716776726799898939374985320242033037</span><br>g=<span class="hljs-number">3</span><br>c=<span class="hljs-built_in">pow</span>(g,m,p)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;c=&#x27;</span>,c)<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">c=2992612627750886887770858313476352707594644300807594304705044416699839774471838751545708692735859654685857490788683751410989270851331507477475091396007893070015119892479188689286417701654825</span><br></code></pre></td></tr></table></figure><h4 id="解答："><a href="#解答：" class="headerlink" title="解答："></a>解答：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#sage</span><br>m = discrete_log(mod(c,p),mod(g,p))<br><span class="hljs-comment">#或者可以省略，直接写</span><br>m = discrete_log(c,mod(g,p))<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>long_to_bytes(<span class="hljs-number">129834262657483951719921277</span>)<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">b&#x27;key&#123;X8fba6&#125;&#x27;</span><br></code></pre></td></tr></table></figure><p>输入容器得到flag</p><h3 id="ezrsa"><a href="#ezrsa" class="headerlink" title="ezrsa"></a>ezrsa</h3><h4 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>flag = <span class="hljs-string">b&#x27;qsnctf&#123;xxx-xxxx-xxxx-xxxx-xxxxxxxxx&#125;&#x27;</span><br>m = bytes_to_long(flag)<br>p = getPrime(<span class="hljs-number">512</span>)<br>q = getPrime(<span class="hljs-number">512</span>)<br>r = getPrime(<span class="hljs-number">512</span>)<br>n = p * q * r<br>leak = p * q<br>e = <span class="hljs-number">0x10001</span><br>c = <span class="hljs-built_in">pow</span>(m, e, n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;c = <span class="hljs-subst">&#123;c&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;n = <span class="hljs-subst">&#123;n&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;leak = <span class="hljs-subst">&#123;leak&#125;</span>&#x27;</span>)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string"># c = 173595148273920891298949441727054328036798235134009407863895058729356993814829340513336567479145746034781201823694596731886346933549577879568197521436900228804336056005940048086898794965549472641334237175801757569154295743915744875800647234151498117718087319013271748204766997008772782882813572814296213516343420236873651060868227487925491016675461540894535563805130406391144077296854410932791530755245514034242725719196949258860635915202993968073392778882692892</span><br><span class="hljs-string"># n = 1396260492498511956349135417172451037537784979103780135274615061278987700332528182553755818089525730969834188061440258058608031560916760566772742776224528590152873339613356858551518007022519033843622680128062108378429621960808412913676262141139805667510615660359775475558729686515755127570976326233255349428771437052206564497930971797497510539724340471032433502724390526210100979700467607197448780324427953582222885828678441579349835574787605145514115368144031247</span><br><span class="hljs-string"># leak = 152254254502019783796170793516692965417859793325424454902983763285830332059600151137162944897787532369961875766745853731769162511788354655291037150251085942093411304833287510644995339391240164033052417935316876168953838783742499485868268986832640692657031861629721225482114382472324320636566226653243762620647</span><br></code></pre></td></tr></table></figure><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><script type="math/tex; mode=display">\begin{align}&c\equiv m^{e}\pmod{n} \\&c\equiv m^{e}\pmod{p*q*r}\\&c\equiv m^{e}\pmod{r} \end{align}</script><h4 id="解答-1"><a href="#解答-1" class="headerlink" title="解答"></a>解答</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes  <br><span class="hljs-keyword">import</span> gmpy2  <br>c = <br>n =  <br>leak =  <br>e = <span class="hljs-number">0x10001</span>  <br>  <br>r = n//leak  <br>phi = r-<span class="hljs-number">1</span>  <br>d = gmpy2.invert(e, phi)  <br>m = <span class="hljs-built_in">pow</span>(c, d, r)  <br><span class="hljs-built_in">print</span>(long_to_bytes(m))<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">qsnctf&#123;12ff81e0-7646-4a96-a7eb-6a509ec01c9e&#125;</span><br></code></pre></td></tr></table></figure><h3 id="factor1"><a href="#factor1" class="headerlink" title="factor1"></a>factor1</h3><h4 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br>p = getPrime(<span class="hljs-number">512</span>)<br>q = getPrime(<span class="hljs-number">512</span>)<br>d = getPrime(<span class="hljs-number">256</span>)<br>e = gmpy2.invert(d, (p**<span class="hljs-number">2</span> - <span class="hljs-number">1</span>) * (q**<span class="hljs-number">2</span> - <span class="hljs-number">1</span>))<br>flag = <span class="hljs-string">&quot;qsnctf&#123;&quot;</span> + hashlib.md5(<span class="hljs-built_in">str</span>(p + q).encode()).hexdigest() + <span class="hljs-string">&quot;&#125;&quot;</span><br><span class="hljs-built_in">print</span>(e)<br><span class="hljs-built_in">print</span>(p * q)<br><span class="hljs-comment">#4602579741478096718172697218991734057017874575484294836043557658035277770732473025335441717904100009903832353915404911860888652406859201203199117870443451616457858224082143505393843596092945634675849883286107358454466242110831071552006337406116884147391687266536283395576632885877802269157970812862013700574069981471342712011889330292259696760297157958521276388120468220050600419562910879539594831789625596079773163447643235584124521162320450208920533174722239029506505492660271016917768383199286913178821124229554263149007237679675898370759082438533535303763664408320263258144488534391712835778283152436277295861859</span><br><span class="hljs-comment">#78665180675705390001452176028555030916759695827388719494705803822699938653475348982551790040292552032924503104351703419136483078949363470430486531014134503794074329285351511023863461560882297331218446027873891885693166833003633460113924956936552466354566559741886902240131031116897293107970411780310764816053</span><br></code></pre></td></tr></table></figure><h4 id="解答-2"><a href="#解答-2" class="headerlink" title="解答:"></a>解答:</h4><p> 这道是参考+复现</p><script type="math/tex; mode=display">\begin{align}(p^2-1)(q^2-1)&=(pq)^2-(p^2+q^2)+1\\ed&\equiv1\mod (p^2-1)(q^2-1)\\ed-k*(p^2-1)(q^2-1)&=1\\(p^2-1)(q^2-1)&>2d\\\left|\frac{e}{(p^2-1)(q^2-1)}-\frac{k}{d}\right|&=\frac{1}{(p^2-1)(q^2-1)*d}<\frac{1}{2d^2}\end{align}</script><p>用<code>wiener</code>恢复出<code>k,d</code>，$(p^2-1)(q^2-1)$与$p^2q^2$相差$p^2+q^2-1$，相应数量级位<code>2046</code>和<code>1025</code>，故可忽略不计，将其用$p^2q^2$进行连分数渐进</p><script type="math/tex; mode=display">\begin{align}p^2+q^2&=(pq)^2-(p^2-1)(q^2-1)+1\\p+q&=\sqrt{p^2+q^2+2pq}\\p-q&=\sqrt{p^2+q^2-2pq}\end{align}</script><p>在<code>sage</code>中有<code>two_squares</code>函数，可以暴力算$p^2+q^2$的形式，但本题数据有点大，没有跑出来。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#sage </span><br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br> <br><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> iroot<br> <br><span class="hljs-keyword">import</span> hashlib<br> <br>e = <span class="hljs-number">4602579741478096718172697218991734057017874575484294836043557658035277770732473025335441717904100009903832353915404911860888652406859201203199117870443451616457858224082143505393843596092945634675849883286107358454466242110831071552006337406116884147391687266536283395576632885877802269157970812862013700574069981471342712011889330292259696760297157958521276388120468220050600419562910879539594831789625596079773163447643235584124521162320450208920533174722239029506505492660271016917768383199286913178821124229554263149007237679675898370759082438533535303763664408320263258144488534391712835778283152436277295861859</span><br> <br>pq = <span class="hljs-number">78665180675705390001452176028555030916759695827388719494705803822699938653475348982551790040292552032924503104351703419136483078949363470430486531014134503794074329285351511023863461560882297331218446027873891885693166833003633460113924956936552466354566559741886902240131031116897293107970411780310764816053</span><br> <br>pqx = pq ^ <span class="hljs-number">2</span><br> <br>fra = (e/pqx).continued_fraction()<br> <br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(fra)):<br> <br>    k, d = fra.numerator(i), fra.denominator(i)<br> <br>    <span class="hljs-keyword">if</span> (e*d - <span class="hljs-number">1</span>) % k == <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> d &gt; <span class="hljs-number">2</span>^<span class="hljs-number">250</span>:<br> <br>        <span class="hljs-built_in">print</span>(k, d)<br> <br>        <span class="hljs-keyword">break</span><br> <br>temp = (e*d - <span class="hljs-number">1</span>) // k<br> <br>pq_square = pqx - temp + <span class="hljs-number">1</span><br> <br>p_q = iroot(pq_square - <span class="hljs-number">2</span>*pq, <span class="hljs-number">2</span>)[<span class="hljs-number">0</span>]<br> <br>p__q = iroot(pq_square + <span class="hljs-number">2</span>*pq, <span class="hljs-number">2</span>)[<span class="hljs-number">0</span>]<br> <br>q = (p_q + p__q) // <span class="hljs-number">2</span><br> <br>p = pq // q<br> <br>flag = <span class="hljs-string">&quot;qsnctf&#123;&quot;</span> + hashlib.md5(<span class="hljs-built_in">str</span>(p + q).encode()).hexdigest() + <span class="hljs-string">&quot;&#125;&quot;</span><br> <br><span class="hljs-built_in">print</span>(flag)<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">qsnctf&#123;8072e8b2982bc729cc74ef58f1abc862&#125;</span><br></code></pre></td></tr></table></figure><h3 id="四重加密"><a href="#四重加密" class="headerlink" title="四重加密"></a>四重加密</h3><p><strong>复现‘是在网上下载了一 随波逐流 CTF编码工具</strong><br>压缩包在WinRAR打开查看<br>![[<a href="https://s2.loli.net/2024/03/21/RQ7tdHChoEWvTzY.png">https://s2.loli.net/2024/03/21/RQ7tdHChoEWvTzY.png</a>]]<br>base32解码得到：qsnctf<br>解压得txt：<br>&#122;&#99;&#121;&#101;&#123;&#109;&#120;&#109;&#101;&#109;&#116;&#120;&#114;&#122;&#116;&#95;&#108;&#122;&#98;&#104;&#97;&#95;&#107;&#119;&#109;&#113;&#122;&#101;&#99;&#125;&#124;&#107;&#101;&#121;&#61;&#104;&#101;&#108;&#108;&#111;<br>是unicoed，转ASCII：zcye{mxmemtxrzt_lzbha_kwmqzec}|key=hello<br>![[<a href="https://s2.loli.net/2024/03/21/4yYPsTfRJHSmAjU.png">https://s2.loli.net/2024/03/21/4yYPsTfRJHSmAjU.png</a>]]<br>还没有得到flag，再解：<br>![[<a href="https://s2.loli.net/2024/03/21/UKCbT8hqHviW5uV.png">https://s2.loli.net/2024/03/21/UKCbT8hqHviW5uV.png</a>]]</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/12/18/hello-world/"/>
    <url>/2023/12/18/hello-world/</url>
    
    <content type="html"><![CDATA[<p>This is the first text.</p><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><script type="math/tex; mode=display">E=mc^2</script><script type="math/tex; mode=display">\frac{-b-\sqrt{\Delta}}{2a}</script>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
